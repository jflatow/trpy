#!/usr/bin/env python
"""
 trpy info TRAILDB ...
 trpy words TRAILDB ... [-f FIELD ...]
 trpy match TRAILDB ... [-q QUERY] [-n N]
 trpy trail TRAILDB ... [-i ID ...]
 trpy merge TRAILDB ... [-o OUTDB]
"""

import os
import sys
import argparse
import datetime
import itertools

from trpy import TDB, TDBCons, Q

def tabify(iter, fmt='%s'):
    return '\t'.join(fmt % x for x in iter)

def tformatter(opts):
    if opts.raw_timestamps:
        return lambda t: '%19d' % t
    return lambda t: '%s' % datetime.datetime.utcfromtimestamp(t)

def iformatter(tdb, opts):
    if opts.cookie:
        return lambda i: tdb.cookie(i)
    return lambda i: i

def qparse(query):
    q = Q.parse(query)
    for clause in q.clauses:
        for literal in clause.literals:
            if isinstance(literal.term, basestring):
                literal.term = tuple(literal.term.split('=', 1))
    return q

def help():
    print(__doc__)

def info(args, opts):
    for arg in args:
        tdb = TDB(arg)
        tmin, tmax = tdb.time_range()
        tformat = tformatter(opts)
        print '%s' % arg
        print ' # trails:                    %12d' % tdb.num_trails
        print ' # events:                    %12d' % tdb.num_events
        print ' # fields:                    %12d' % tdb.num_fields
        for f in tdb.fields[1:]:
            print ' #  %-25s %12d' % (f + ':', tdb.lexicon_size(f))
        print u' \u2265 time:               %s' % tformat(tmin)
        print u' \u2264 time:               %s' % tformat(tmax)

def words(args, opts):
    for arg in args:
        tdb = TDB(arg)
        for field in opts.field or tdb.fields[1:]:
            for value in tdb.lexicon(field):
                print '%s\t%s' % (field, value)

def match(args, opts):
    for arg in args:
        tdb = TDB(arg)
        fields = opts.field or tdb.fields[1:]
        iformat = iformatter(tdb, opts)
        tformat = tformatter(opts)
        query = qparse(opts.query) if opts.query else None
        if opts.header:
            print '%s\t%s\t%s' % ('cookie' if opts.cookie else 'id', 'time', tabify(fields))
        for id, trail in itertools.islice(tdb.match(query=query, expand=opts.expand), opts.n or None):
            for event in trail:
                print '%s\t%s\t%s' % (iformat(id), tformat(event.time), tabify(getattr(event, f) for f in fields))

def trail(args, opts):
    for arg in args:
        tdb = TDB(arg)
        fields = opts.field or tdb.fields[1:]
        tformat = tformatter(opts)
        if opts.header:
            print '%s\t%s\t%s' % ('cookie' if opts.cookie else 'id', 'time', tabify(fields))
        for id in opts.id or [0]:
            id = int(id)
            cookie = tdb.cookie(id)
            for event in tdb.trail(id, expand=opts.expand):
                print '%s\t%s\t%s' % (cookie, tformat(event.time), tabify(getattr(event, f) for f in fields))

def merge(args, opts):
    for n, arg in enumerate(args):
        tdb = TDB(arg)
        if n == 0:
            cons = TDBCons(opts.outdb, tdb.fields[1:])
        cons.append(tdb)
    cons.finalize()

def split(args, opts): # XXX: broken by oss tdb
    out = opts.outdb
    fmt = out if '%' in out else '.%02d.'.join(out.split('.'))
    for arg in args:
        tdb = TDB(arg)
        tdb.split(opts.n or 1, fmt=fmt)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--cookie',
                        action='store_true',
                        help="use cookies instead of ids")
    parser.add_argument('-i', '--id',
                        action='append',
                        help="id to get")
    parser.add_argument('-e', '--expand',
                        action='store_true',
                        help="expand event values to strings")
    parser.add_argument('-f', '--field',
                        action='append',
                        help="name of field to operate on")
    parser.add_argument('-H', '--header',
                        action='store_true',
                        help="include header")
    parser.add_argument('-n',
                        type=int,
                        help="number of trails or parts")
    parser.add_argument('-o', '--outdb',
                        default='a.tdb',
                        help="name of output dbs for split / merge")
    parser.add_argument('-q', '--query',
                        help="query to use for creating filter")
    parser.add_argument('-T', '--raw-timestamps',
                        action='store_true',
                        help="do not interpret timestamps")
    opts, args = parser.parse_known_args(sys.argv[1:])
    cmd, args = args[0] if args else 'help', args[1:]
    if cmd == 'help':
        return help()
    return eval(cmd)(args, opts)

if __name__ == '__main__':
   main()
